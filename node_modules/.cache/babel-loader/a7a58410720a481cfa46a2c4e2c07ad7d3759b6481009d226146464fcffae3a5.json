{"ast":null,"code":"export class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrlUser = `${baseUrl}/users/me`;\n    this._baseUrlCards = `${baseUrl}/cards`;\n    this._headers = headers;\n  }\n  _checkRespondStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getProfile() {\n    return fetch(this._baseUrlUser, {\n      headers: this._headers\n    }).then(res => this._checkRespondStatus(res));\n  }\n  editProfile(data) {\n    return fetch(this._baseUrlUser, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._checkRespondStatus(res));\n  }\n  editAvatar(data) {\n    return fetch(`${this._baseUrlUser}/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: data\n      })\n    }).then(res => this._checkRespondStatus(res));\n  }\n  getInitialCards() {\n    return fetch(this._baseUrlCards, {\n      headers: this._headers\n    }).then(res => this._checkRespondStatus(res));\n  }\n  addNewCard(data) {\n    return fetch(this._baseUrlCards, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._checkRespondStatus(res));\n  }\n  removeCard(cardId) {\n    return fetch(`${this._baseUrlCards}/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    }).then(res => this._checkRespondStatus(res));\n  }\n\n  //   addLike(cardId, isLiked) {\n  //     if (isLiked.length < 2) {\n  //       return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n  //         method: \"PUT\",\n  //         headers: this._headers,\n  //         body: JSON.stringify(\n  //           api.getProfile().then((data) => {\n  //             data;\n  //           })\n  //         ),\n  //       }).then((res) => this._checkRespondStatus(res));\n  //     }\n  //   }\n\n  //   removeLike(cardId, isLiked) {\n  //     if (isLiked.length > 1) {\n  //       return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n  //         method: \"DELETE\",\n  //         headers: this._headers,\n  //         body: JSON.stringify(\n  //           api.getProfile().then((data) => {\n  //             data;\n  //           })\n  //         ),\n  //       }).then((res) => this._checkRespondStatus(res));\n  //     }\n  //   }\n}\n\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-54\",\n  headers: {\n    authorization: \"b4cc6e60-7c2a-4c93-961f-3d990169c3ad\",\n    \"Content-Type\": \"application/json\"\n  }\n});","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrlUser","_baseUrlCards","_headers","_checkRespondStatus","res","ok","json","Promise","reject","status","getProfile","fetch","then","editProfile","data","method","body","JSON","stringify","name","about","editAvatar","avatar","getInitialCards","addNewCard","link","removeCard","cardId","api","authorization"],"sources":["/Users/aleksandrdikov/dev/mesto-react/src/utils/api.js"],"sourcesContent":["export class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrlUser = `${baseUrl}/users/me`;\n    this._baseUrlCards = `${baseUrl}/cards`;\n    this._headers = headers;\n  }\n\n  _checkRespondStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(this._baseUrlUser, {\n      headers: this._headers,\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  editProfile(data) {\n    return fetch(this._baseUrlUser, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  editAvatar(data) {\n    return fetch(`${this._baseUrlUser}/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n\n      body: JSON.stringify({\n        avatar: data,\n      }),\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  getInitialCards() {\n    return fetch(this._baseUrlCards, {\n      headers: this._headers,\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  addNewCard(data) {\n    return fetch(this._baseUrlCards, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link,\n      }),\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  removeCard(cardId) {\n    return fetch(`${this._baseUrlCards}/${cardId}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  //   addLike(cardId, isLiked) {\n  //     if (isLiked.length < 2) {\n  //       return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n  //         method: \"PUT\",\n  //         headers: this._headers,\n  //         body: JSON.stringify(\n  //           api.getProfile().then((data) => {\n  //             data;\n  //           })\n  //         ),\n  //       }).then((res) => this._checkRespondStatus(res));\n  //     }\n  //   }\n\n  //   removeLike(cardId, isLiked) {\n  //     if (isLiked.length > 1) {\n  //       return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n  //         method: \"DELETE\",\n  //         headers: this._headers,\n  //         body: JSON.stringify(\n  //           api.getProfile().then((data) => {\n  //             data;\n  //           })\n  //         ),\n  //       }).then((res) => this._checkRespondStatus(res));\n  //     }\n  //   }\n}\n\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-54\",\n  headers: {\n    authorization: \"b4cc6e60-7c2a-4c93-961f-3d990169c3ad\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}