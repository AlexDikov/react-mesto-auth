{"ast":null,"code":"const baseUrl = \"http://localhost:3001\";\nconsole.log('ggg', document);\nconst token = document.cookie.split('; ').find(row => row.startsWith('token=')).split('=')[1];\nexport const checkToken = () => {\n  return fetch(`${baseUrl}/users/me`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  });\n};\nexport const register = (password, email) => {\n  return fetch(`${baseUrl}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  });\n};\nexport const login = (email, password) => {\n  return fetch(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n};","map":{"version":3,"names":["baseUrl","console","log","document","token","cookie","split","find","row","startsWith","checkToken","fetch","headers","Authorization","register","password","email","method","body","JSON","stringify","login"],"sources":["/Users/aleksandrdikov/dev/mesto-auth/react-mesto-auth/src/utils/auth.js"],"sourcesContent":["const baseUrl = \"http://localhost:3001\";\n\nconsole.log('ggg', document)\nconst token = document.cookie\n.split('; ')\n.find(row => row.startsWith('token='))\n.split('=')[1];\n\nexport const checkToken = () => {\n  return fetch(`${baseUrl}/users/me`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  });\n};\n\nexport const register = (password, email) => {\n  return fetch(`${baseUrl}/signup`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ password, email }),\n  });\n};\n\nexport const login = (email, password) => {\n  return fetch(`${baseUrl}/signin`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ email, password }),\n  });\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvCC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEC,QAAQ,CAAC;AAC5B,MAAMC,KAAK,GAAGD,QAAQ,CAACE,MAAM,CAC5BC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC,CAAC,CACrCH,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAEd,OAAO,MAAMI,UAAU,GAAG,MAAM;EAC9B,OAAOC,KAAK,CAAE,GAAEX,OAAQ,WAAU,EAAE;IAClCY,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAAST,KAAM;IACjC;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAG,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOL,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCiB,MAAM,EAAE,MAAM;IACdL,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,QAAQ;MAAEC;IAAM,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMK,KAAK,GAAG,CAACL,KAAK,EAAED,QAAQ,KAAK;EACxC,OAAOJ,KAAK,CAAE,GAAEX,OAAQ,SAAQ,EAAE;IAChCiB,MAAM,EAAE,MAAM;IACdL,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEJ,KAAK;MAAED;IAAS,CAAC;EAC1C,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}