{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrlUser = `${baseUrl}/users/me`;\n    this._baseUrlCards = `${baseUrl}/cards`;\n    this._headers = headers;\n  }\n  _checkRespondStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getProfile() {\n    return fetch(this._baseUrlUser, {\n      headers: this._headers\n    }).then(res => this._checkRespondStatus(res));\n  }\n\n  //   editProfile(data) {\n  //     return fetch(this._baseUrlUser, {\n  //       method: \"PATCH\",\n  //       headers: this._headers,\n  //       body: JSON.stringify({\n  //         name: data.name,\n  //         about: data.about,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  //   editAvatar(data) {\n  //     return fetch(`${this._baseUrlUser}/avatar`, {\n  //       method: \"PATCH\",\n  //       headers: this._headers,\n\n  //       body: JSON.stringify({\n  //         avatar: data,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  getInitialCards() {\n    return fetch(this._baseUrlCards, {\n      headers: this._headers\n    }).then(res => this._checkRespondStatus(res));\n  }\n\n  //   addNewCard(data) {\n  //     return fetch(this._baseUrlCards, {\n  //       method: \"POST\",\n  //       headers: this._headers,\n  //       body: JSON.stringify({\n  //         name: data.name,\n  //         link: data.link,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  //   removeCard(cardId) {\n  //     return fetch(`${this._baseUrlCards}/${cardId}`, {\n  //       method: \"DELETE\",\n  //       headers: this._headers,\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  addLike(cardId, isLiked) {\n    if (!isLiked) {\n      return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n        method: \"PUT\",\n        headers: this._headers,\n        body: JSON.stringify(api.getProfile())\n      }).then(res => this._checkRespondStatus(res));\n    } else {\n      return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n        method: \"DELETE\",\n        headers: this._headers,\n        body: JSON.stringify(api.getProfile().then(data => data))\n      }).then(res => this._checkRespondStatus(res));\n    }\n  }\n}\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-54\",\n  headers: {\n    authorization: \"b4cc6e60-7c2a-4c93-961f-3d990169c3ad\",\n    \"Content-Type\": \"application/json\"\n  }\n});","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrlUser","_baseUrlCards","_headers","_checkRespondStatus","res","ok","json","Promise","reject","status","getProfile","fetch","then","getInitialCards","addLike","cardId","isLiked","method","body","JSON","stringify","api","data","authorization"],"sources":["/Users/aleksandrdikov/dev/mesto-react/src/utils/api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrlUser = `${baseUrl}/users/me`;\n    this._baseUrlCards = `${baseUrl}/cards`;\n    this._headers = headers;\n  }\n\n  _checkRespondStatus(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  getProfile() {\n    return fetch(this._baseUrlUser, {\n      headers: this._headers,\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  //   editProfile(data) {\n  //     return fetch(this._baseUrlUser, {\n  //       method: \"PATCH\",\n  //       headers: this._headers,\n  //       body: JSON.stringify({\n  //         name: data.name,\n  //         about: data.about,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  //   editAvatar(data) {\n  //     return fetch(`${this._baseUrlUser}/avatar`, {\n  //       method: \"PATCH\",\n  //       headers: this._headers,\n\n  //       body: JSON.stringify({\n  //         avatar: data,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  getInitialCards() {\n    return fetch(this._baseUrlCards, {\n      headers: this._headers,\n    }).then((res) => this._checkRespondStatus(res));\n  }\n\n  //   addNewCard(data) {\n  //     return fetch(this._baseUrlCards, {\n  //       method: \"POST\",\n  //       headers: this._headers,\n  //       body: JSON.stringify({\n  //         name: data.name,\n  //         link: data.link,\n  //       }),\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  //   removeCard(cardId) {\n  //     return fetch(`${this._baseUrlCards}/${cardId}`, {\n  //       method: \"DELETE\",\n  //       headers: this._headers,\n  //     }).then((res) => this._checkRespondStatus(res));\n  //   }\n\n  addLike(cardId, isLiked) {\n    if (!isLiked) {\n      return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n        method: \"PUT\",\n        headers: this._headers,\n        body: JSON.stringify(api.getProfile()),\n      }).then((res) => this._checkRespondStatus(res));\n    } else {\n      return fetch(`${this._baseUrlCards}/${cardId}/likes/`, {\n        method: \"DELETE\",\n        headers: this._headers,\n        body: JSON.stringify(api.getProfile().then((data) => data)),\n      }).then((res) => this._checkRespondStatus(res));\n    }\n  }\n}\n\nexport const api = new Api({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-54\",\n  headers: {\n    authorization: \"b4cc6e60-7c2a-4c93-961f-3d990169c3ad\",\n    \"Content-Type\": \"application/json\",\n  },\n});\n"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACRC,WAAW,OAAuB;IAAA,IAAtB;MAAEC,OAAO;MAAEC;IAAQ,CAAC;IAC9B,IAAI,CAACC,YAAY,GAAI,GAAEF,OAAQ,WAAU;IACzC,IAAI,CAACG,aAAa,GAAI,GAAEH,OAAQ,QAAO;IACvC,IAAI,CAACI,QAAQ,GAAGH,OAAO;EACzB;EAEAI,mBAAmB,CAACC,GAAG,EAAE;IACvB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;EAEAC,UAAU,GAAG;IACX,OAAOC,KAAK,CAAC,IAAI,CAACX,YAAY,EAAE;MAC9BD,OAAO,EAAE,IAAI,CAACG;IAChB,CAAC,CAAC,CAACU,IAAI,CAAER,GAAG,IAAK,IAAI,CAACD,mBAAmB,CAACC,GAAG,CAAC,CAAC;EACjD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEAS,eAAe,GAAG;IAChB,OAAOF,KAAK,CAAC,IAAI,CAACV,aAAa,EAAE;MAC/BF,OAAO,EAAE,IAAI,CAACG;IAChB,CAAC,CAAC,CAACU,IAAI,CAAER,GAAG,IAAK,IAAI,CAACD,mBAAmB,CAACC,GAAG,CAAC,CAAC;EACjD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEAU,OAAO,CAACC,MAAM,EAAEC,OAAO,EAAE;IACvB,IAAI,CAACA,OAAO,EAAE;MACZ,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACV,aAAc,IAAGc,MAAO,SAAQ,EAAE;QACrDE,MAAM,EAAE,KAAK;QACblB,OAAO,EAAE,IAAI,CAACG,QAAQ;QACtBgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,GAAG,CAACX,UAAU,EAAE;MACvC,CAAC,CAAC,CAACE,IAAI,CAAER,GAAG,IAAK,IAAI,CAACD,mBAAmB,CAACC,GAAG,CAAC,CAAC;IACjD,CAAC,MAAM;MACL,OAAOO,KAAK,CAAE,GAAE,IAAI,CAACV,aAAc,IAAGc,MAAO,SAAQ,EAAE;QACrDE,MAAM,EAAE,QAAQ;QAChBlB,OAAO,EAAE,IAAI,CAACG,QAAQ;QACtBgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACC,GAAG,CAACX,UAAU,EAAE,CAACE,IAAI,CAAEU,IAAI,IAAKA,IAAI,CAAC;MAC5D,CAAC,CAAC,CAACV,IAAI,CAAER,GAAG,IAAK,IAAI,CAACD,mBAAmB,CAACC,GAAG,CAAC,CAAC;IACjD;EACF;AACF;AAEA,OAAO,MAAMiB,GAAG,GAAG,IAAIzB,GAAG,CAAC;EACzBE,OAAO,EAAE,6CAA6C;EACtDC,OAAO,EAAE;IACPwB,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}